Module basics:base

/*Some defintions to use without any errors*/

type ::= baseTy
       | arrowTy(type, type)
Projection type :

term ::= var(string)
       | app(term, term)
       | abs(string, type, term)
Projection term :


ctx ::= nil
      | cons(string, type, ctx)
Projection ctx :


Judgment typeOf : ctx term* type
Fixed Judgment lkp : ctx string type


typeOf G T1 arrowTy(Ty1, Ty2)
typeOf G T2 Ty1
----------------------------- [T-App]
typeOf G app(T1, T2) Ty2


typeOf cons(X, Ty1, G) T Ty2
----------------------------------------- [T-Abs]
typeOf G abs(X, Ty1, T) arrowTy(Ty1, Ty2)


lkp G X Ty
------------------ [T-Var]
typeOf G var(X) Ty



========================== [L-Here]
lkp cons(X, Ty, Rest) X Ty


lkp Rest X Ty
X != Y
=========================== [L-Later]
lkp cons(Y, YTy, Rest) X Ty




shortTy ::= shortTyConstructor
Projection shortTy :


Judgment judgment : term*


