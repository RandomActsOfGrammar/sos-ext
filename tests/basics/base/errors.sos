Module basics:base

/********************************************************************
 *                              SYNTAX                              *
 ********************************************************************/
/*Type declared twice*/
Error Expected "Found multiple declarations" {
  doubleTy ::= doubleTyA
  doubleTy ::= doubleTyB
  Projection doubleTy :
}

/*Constructor declared twice*/
Error Expected "Found multiple declarations" {
  doubleConstructorTy ::= doubleConstructor
                        | doubleConstructor
  Projection doubleConstructorTy :
}

/*Constructor with var args*/
Error Expected "cannot contain variable types" {
  constructorVarTy ::= constructorVarTy(int, A)
  Projection constructorVarTy :
}


/*We can't check this error because it gives a syntax error instead
Error Expected "only define new constructors for user-defined types" {
  int ::= newInt
}*/


/*Projection for non-existent type*/
Error Expected "Projection declared for unknown type" {
  Projection nonexistentType : [(string, type)]
}

/*Projection type not declared*/
Error Expected "Must define projection relation type" {
  noProjRelTy ::= noProjRelTyA
}

/*Projection type twice*/
Error Expected "multiple projection relation type" {
  twoProjRelTy ::= twoProjRelTyA
  Projection twoProjRelTy : type
  Projection twoProjRelTy : term
}

/*Projection declared with variable args*/
Error Expected "contain variable" {
  varProjType ::= varProjTypeA
  Projection varProjType : A int string
}



/********************************************************************
 *                      JUDGMENT DECLARATIONS                       *
 ********************************************************************/
/*Bad PC for judgment*/
Error Expected "Invalid primary component" {
  Judgment invalidPrimaryComponent : type term
}
Error Expected "must be an extensible type" {
  Error Expected "primary component is not extensible" {
    Judgment nonExtensiblePC : [(string, type)] string* type
  }
}
Error Expected "Two primary components" {
  Judgment twoPC : type* term*
}

/*Fixed judgment cannot have a PC*/
Error Expected "has a primary component but cannot" {
  Fixed Judgment fixedWithPC : type*
}


/*Multiple declarations for a judgment*/
Error Expected "multiple declarations" {
  Judgment doubleJudgment : ctx term* type
  Fixed Judgment doubleJudgment : term type
}



/********************************************************************
 *                              RULES                               *
 ********************************************************************/
/*Extensible rule for fixed judgment*/
Error Expected "extensible" {
  Fixed Judgment fixedAndExtJudgment : ctx term

  ----------------------- [FixedAndExt]
  fixedAndExtJudgment G T
}

/*Fixed rule for extensible judgment*/
Error Expected "fixed" {
  Judgment extAndFixedJudgment : ctx* term

  ======================= [ExtAndFixed]
  extAndFixedJudgment G T
}


/*Multiple projection rules*/
Error Expected "only define one" {
  Judgment multipleProjectionRules : ctx term*

  ------------------ [Proj-MultipleProjectionRules1]*
  multipleProjectionRules G T

  ------------------ [Proj-MultipleProjectionRules2]*
  multipleProjectionRules G T
}

/*Projection with unspecified form*/
Error Expected "constructor" {
  ----------------- [Project-Var]
  |{type}- A ~~> A
}

/*Projection of base construct*/
Error Expected "for a constructor from the module declaring" {
  -------------------------- [ProjectBaseConstruct]
  |{type}- baseTy ~~> baseTy
}


/*Multiple declarations of same rule name*/
Error Expected "multiple declarations" {
  ------------------------- [DoubleRule]
  typeOf G app(X, Y) Ty

  ------------------------- [DoubleRule]
  typeOf G app(X, Y) Ty
}

/*Multiple declarations of same rule name*/
Error Expected "multiple declarations" {
  ------------------------- [DoubleRule2]
  typeOf G app(X, Y) Ty

  ========================== [DoubleRule2]
  fixed

  Fixed Judgment fixed :
}


/*Invalid conclusion forms*/
Error Expected "relation" {
  ----- [GreaterRule]
  X > Y
}
Error Expected "relation" {
  --------- [PlusRule]
  X + Y = Z
}
Error Expected "Cannot have a negation as a conclusion" {
  ------------- [NegationConclusion]
  !typeOf G X T
}



/********************************************************************
 *                            JUDGMENTS                             *
 ********************************************************************/
/*Not enough args to judgment*/
Error Expected "arguments" {
  typeOf G X
  --------------------- [JudgmentShortArgsRule]
  typeOf G app(X, Y) Ty
}

/*Too many args to judgment*/
Error Expected "arguments" {
  typeOf G X Ty V
  --------------------- [JudgmentExtraArgsRule]
  typeOf G app(X, Y) Ty
}



/********************************************************************
 *                              TERMS                               *
 ********************************************************************/
/*Not enough args to constructor*/
Error Expected "Too few arguments" {
  typeOf G X Ty
  ------------------ [ConstructorShortArgsRule]
  typeOf G app(X) Ty
}
Error Expected "Too few arguments" {
  --------------- [ConstrMissingArgsRule]
  typeOf G app Ty
}

/*Too many args to constructor*/
Error Expected "Too many arguments" {
  typeOf G X Ty
  ------------------------ [ConstructorExtraArgsRule]
  typeOf G app(X, Y, Z) Ty
}



/********************************************************************
 *                         NAME RESOLUTION                          *
 ********************************************************************/
Error Expected "Unknown type" {
  Fixed Judgment unknownTypeArg : unknownTy [int]
}

Error Expected "Unknown constructor" {
  Fixed Judgment unknownConstructorRel : term

  ============================================ [UnknownConstructor]
  unknownConstructorRel unknownTermConstructor
}

Error Expected "Unknown judgment" {
  ===================== [UnknownJudgmentRule]
  unknownJudgment X Y Z
}



/********************************************************************
 *                        TYPE UNIFICATION                          *
 ********************************************************************/
Fixed Judgment typeErrors : A
Error Expected "Cannot unify" {
  3 = "3"
  ============ [TE-Rule1]
  typeErrors A
}
Error Expected "Cannot unify" {
  [3, 4] = (3, 4)
  =============== [TE-Rule2]
  typeErrors A
}
Error Expected "Cannot unify" {
  baseTy = var(X)
  =============== [TE-Rule3]
  typeErrors A
}
Error Expected "Cannot unify" {
  [3, 4] ++ "list" = X
  ==================== [TE-Rule4]
  typeErrors A
}
Error Expected "Cannot unify" {
  [] ++ [1] = X
  "" ++ "1" = X
  ============= [TE-Rule5]
  typeErrors A
}
Error Expected "Cannot unify" {
  (W : string) = X
  X - Y = Z
  ================ [TE-Rule6]
  typeErrors A
}
