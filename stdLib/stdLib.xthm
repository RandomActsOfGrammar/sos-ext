Module stdLib.

Theorem lookup_unique[Key, Value] :
  forall L (Key : Key) (Value1 Value2 : Value),
    lookup L Key Value1 -> lookup L Key Value2 -> Value1 = Value2.
induction on 1. intros Lkp1' Lkp2'. Lkp1: case Lkp1'.
  %1:  Lkp-Horo
   Lkp2: case Lkp2'.
     %1.1:  Lkp-Here
      search.
     %1.2:  Lkp-Later
      apply Lkp2 to _.
  %2:  Lkp-Later
   Lkp2: case Lkp2'.
     %2.1:  Lkp-Here
      apply Lkp1 to _.
     %2.2:  Lkp-Later
      backchain IH.


Theorem no_lookup [Key, Value] :
  forall L (Key : Key) (Value : Value),
    no_lookup L Key -> lookup L Key Value -> false.
induction on 1. intros NLkp' Lkp'. NLkp: case NLkp'.
  %1:  NLkp-Nil
   Lkp: case Lkp'.
  %2:  NLkp-Cons
   Lkp: case Lkp'.
     %2.1:  Lkp-Here
      backchain NLkp.
     %2.2:  Lkp-Later
      backchain IH.


Theorem lookup_eq_or_not [Key, Value] :
  forall L (A B : Key) (VA VB : Value),
    lookup L A VA -> lookup L B VB -> A = B \/ (A = B -> false).
induction on 1. intros LkpA LkpB. LkpA: case LkpA.
  %1:  Lkp-Here
   LkpB: case LkpB.
     %1.1:  Lkp-Here
      search.
     %1.2:  Lkp-Later
      search.
  %2:  Lkp-Later
   LkpB: case LkpB.
     %2.1:  Lkp-Here
      right. intros Eq. case Eq. backchain LkpA.
     %2.2:  Lkp-Later
      apply IH to LkpA1 LkpB1. search.


Theorem lookup_mem [Key, Value] :
  forall L (Key : Key) (Value : Value),
    lookup L Key Value -> mem (Key, Value) L.
induction on 1. intros Lkp'. Lkp: case Lkp'.
  %1:  Lkp-Here
   search.
  %2:  Lkp-Later
   apply IH to Lkp1. search.


Theorem no_lookup_mem [Key, Value] :
  forall L (Key : Key) (Value : Value),
    no_lookup L Key -> mem (Key, Value) L -> false.
induction on 1. intros Lkp Mem. Lkp: case Lkp.
  %1:  NLkp-Nil
   case Mem.
  %2:  NLkp-Cons
   Mem: case Mem.
     %2.1:  Mem-Here
      apply Lkp to _.
     %2.2:  Mem-Later
      apply IH to Lkp1 Mem.


Theorem no_lookup_mem_pair [Key, Value] :
  forall L (P : pair Key Value) K,
    no_lookup L K -> mem P L -> exists X Y, P = (X, Y).
induction on 2. intros NLkp Mem. Mem: case Mem.
  %1:  Mem-Here
   case NLkp. search.
  %2:  Mem-Later
   NLkp: case NLkp. apply IH to _ Mem. search.


Theorem lookup_select [Key, Value] :
  forall L (Key : Key) (Value : Value),
    lookup L Key Value -> exists L', select (Key, Value) L' L.
induction on 1. intros Lkp'. Lkp: case Lkp'.
  %1:  Lkp-Here
   search.
  %2:  Lkp-Later
   apply IH to Lkp1. search.


Theorem no_lookup_select [Key, Value] :
  forall L (Key : Key) (Value : Value) R,
    no_lookup L Key -> select (Key, Value) R L -> false.
induction on 1. intros NLkp Slct. NLkp: case NLkp.
  %1:  NLkp-Nil
   case Slct.
  %2:  NLkp-Cons
   Slct: case Slct.
     %2.1:  Slct-First
      apply NLkp to _.
     %2.2:  Slct-Later
      apply IH to NLkp1 Slct.


Theorem select_lookup [Key, Value] :
  forall L (Key K : Key) (Value V : Value) R,
    lookup L K V -> select (Key, Value) R L -> (K = Key -> false) ->
    lookup R K V.
induction on 1. intros Lkp Slct NEq. Lkp: case Lkp.
  %1:  Lkp-Here
   Slct: case Slct.
     %1.1:  Slct-First
      apply NEq to _.
     %1.2:  Slct-Later
      search.
  %2:  Lkp-Later
   Slct: case Slct.
     %2.1:  Slct-First
      search.
     %2.2:  Slct-Later
      apply IH to Lkp1 Slct _. search.



Theorem no_lookup_after_select_before [Key, Value] :
  forall (Key K : Key) (V : Value) Rest L,
    no_lookup Rest Key -> select (K, V) Rest L ->
    (K = Key -> false) ->
    no_lookup L Key.
induction on 1. intros NLkp Slct NEq. NLkp: case NLkp.
  %1:  NLkp-Nil
   case Slct. search.
  %2:  NLkp-Cons
   Slct: case Slct.
     %2.1:  Slct-First
      search.
     %2.2:  Slct-Later
      apply IH to NLkp1 Slct _. search.


Theorem no_lookup_before_select_after [Key, Value] :
  forall (Key : Key) (P : pair Key Value) Rest L,
    no_lookup L Key -> select P Rest L ->
    no_lookup Rest Key.
induction on 2. intros NLkp Slct. Slct: case Slct.
  %1:  Slct-First
   case NLkp. search.
  %2:  Slct-Later
   NLkp: case NLkp. apply IH to NLkp1 Slct. search.


Theorem lookup_after_select_before [Key, Value] :
  forall (K Key : Key) (V Value : Value) L R,
    lookup R K V -> select (Key, Value) R L -> (K = Key -> false) ->
    lookup L K V.
induction on 2. intros Lkp Slct NEq. Slct: case Slct.
  %1:  Slct-First
   unfold. intros E. case E. backchain NEq. search.
  %2:  Slct-Later
   L: case Lkp.
     %2.1:  Lkp-Here
      search.
     %2.2:  Lkp-Later
      apply IH to L1 Slct NEq. search.


Theorem mem_select [Item] : forall L (X : Item),
  mem X L -> exists L', select X L' L.
induction on 1. intros Mem'. Mem: case Mem'.
  %1:  Mem-Here
   search.
  %2:  Mem-Later
   apply IH to Mem. search.


Theorem select_mem [Item] : forall L (X : Item) L',
  select X L' L -> mem X L.
induction on 1. intros Slct'. Slct: case Slct'.
  %1:  Slct-First
   search.
  %2:  Slct-Later
   apply IH to Slct. search.


Theorem mem_after_select_before [Item] : forall L L' (X Y : Item),
  select X L' L -> mem Y L' -> mem Y L.
induction on 1. intros Slct Mem. Slct: case Slct.
  %1:  Slct-First
   search.
  %2:  Slct-Later
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Slct Mem. search.


Theorem mem_before_select_after [Item] : forall L L' (X Y : Item),
  select X L' L -> mem Y L -> (X = Y -> false) -> mem Y L'.
induction on 1. intros Slct Mem Eq. Slct: case Slct.
  %1:  Slct-First
   M: case Mem. apply Eq to _. search.
  %2:  Slct-Later
   M: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Slct M Eq. search.


Theorem select_comm [Item] : forall L Rest Rest' (X Y : Item),
  select X Rest L -> select Y Rest' Rest ->
  exists R, select Y R L /\ select X Rest' R.
induction on 1. intros SX SY. SX: case SX.
  %Slct-First
   search.
  %Slct-Later
   SY: case SY.
     %Slct-First
      search.
     %Slct-Later
      apply IH to SX SY. search.


Theorem mem_append_left [A] : forall L1 L2 L (A : A),
  mem A L1 -> L1 ++ L2 = L -> mem A L.
induction on 1. intros Mem' App. case Mem'.
  %1:  Mem-Here
   case App. search.
  %2:  Mem-Later
   App: case App. apply IH to H1 App. search.


Theorem mem_append_right [A] : forall L1 L2 L (A : A),
  mem A L2 -> L1 ++ L2 = L -> mem A L.
induction on 2. intros Mem App. App: case App.
  %1:  L1 = []
   search.
  %2:  L1 = H::T
   apply IH to Mem App. search.


Theorem mem_append [A] : forall L1 L2 L (A : A),
  mem A L -> L1 ++ L2 = L -> mem A L1 \/ mem A L2.
induction on 1. intros Mem' App'. Mem: case Mem'.
  %1:  Mem-Here
   App: case App'.
     %1.1:  L1 = []
      search.
     %1.2:  L1 = A::T
      search.
  %2:  Mem-Later
   App: case App'.
     %2.1:  L1 = []
      search.
     %2.2:  L1 = I::T
      Or: apply IH to Mem App. case Or. search. search.


Theorem not_mem [A] : forall (A : A) L,
  not_mem A L -> mem A L -> false.
induction on 1. intros N M. N: case N.
  %1:  NMem-Nil
   case M.
  %2:  NMem-Cons
   M: case M.
     %2.1:  Mem-Here
      apply N to _.
     %2.2:  Mem-Later
      apply IH to N1 M.


Theorem not_mem_select [A] : forall L (A : A) L',
  not_mem A L -> select A L' L -> false.
intros N S. M: apply select_mem to S. apply not_mem to N M.


Theorem not_mem_after_select_before [A] : forall L L' (X Y : A),
  select X L' L -> not_mem Y L' -> (X = Y -> false) -> not_mem Y L.
induction on 1. intros S N NEq. S: case S.
  %1:  Slct-First
   search.
  %2:  Slct-Later
   case N. apply IH to S _ _. search.


Theorem not_mem_before_select_after [A] : forall L L' (X Y : A),
  select X L' L -> not_mem Y L -> not_mem Y L'.
induction on 1. intros S N. S: case S.
  %1:  Slct-First
   case N. search.
  %2:  Slct-Later
   case N. apply IH to S _. search.


Theorem not_mem_append [A] : forall L1 L2 L (A : A),
  not_mem A L1 -> not_mem A L2 -> L1 ++ L2 = L -> not_mem A L.
induction on 1. intros NA NB App. NA: case NA.
  %1:  NMem-Nil
   case App. search.
  %2:  NMem-Cons
   case App. apply IH to NA1 _ _. search.


Theorem not_mem_append_back [A] : forall L1 L2 L (A : A),
  not_mem A L -> L1 ++ L2 = L -> not_mem A L1 /\ not_mem A L2.
induction on 2. intros N App.  App: case App.
  %1:  [] ++ L2 = L2
   search.
  %2:  (H::T) ++ L2 = H::L4
   case N. apply IH to _ App. search.


Theorem permutation_mem [Item] : forall (L M : list Item) I,
  permutation L M -> mem I L -> mem I M.
induction on 2. intros P M. M: case M.
  %1:  Mem-Here
   P: case P. apply select_mem to P. search.
  %2:  Mem-Later
   P: case P. M': apply IH to P1 M.
   apply mem_after_select_before to _ M'. search.


%Based on http://abella-prover.org/examples/first-order/lists.html
Theorem perm_lemma [Item] : forall A B B' (X : Item),
  permutation B' A -> select X B' B -> permutation B (X::A).
induction on 2. intros P S. S: case S.
  %1:  Prm-Nil
   search.
  %2:  Prm-Cons
   P: case P. apply IH to P1 S. search.


Theorem permutation_symmetric [Item] : forall (L M : list Item),
  permutation L M -> permutation M L.
induction on 1. intros P. P: case P.
  %1:  Prm-Nil
   search.
  %2:  Prm-Cons
   PSub: apply IH to P1. apply perm_lemma to PSub P. search.


Theorem no_lookup_permutation [Key, Value] :
  forall (L P : list (pair Key Value)) (Key : Key),
    no_lookup L Key -> permutation L P -> no_lookup P Key.
induction on 1. intros NLkp P. NLkp: case NLkp.
  %1:  NLkp-Nil
   case P. search.
  %2:  NLkp-Cons
   P: case P. NLkp': apply IH to NLkp1 P1.
   apply no_lookup_after_select_before to NLkp' P NLkp. search.


Theorem count_is_integer [Item] : forall (I : Item) L N,
  count I L N -> is_integer N.
induction on 1. intros C. C: case C.
  %1:  Cnt-Nil
   search.
  %2:  Cnt-ConsEq
   apply IH to C. apply plus_integer_is_integer to _ _ C1. search.
  %3:  Cnt-ConsNEq
   apply IH to C1. search.


Theorem count_geq_0 [Item] : forall (I : Item) L N,
  count I L N -> N >= 0.
induction on 1. intros C. C: case C.
  %1:  Cnt-Nil
   search.
  %2:  Cnt-ConsEq
   GEq: apply IH to C.
   apply greatereq_integer__add_positive to _ GEq C1. search.
  %3:  Cnt-ConsNEq
   apply IH to C1. search.


Theorem select_count [Item] : forall (I : Item) L Rest N N',
  count I L N -> select I Rest L -> N - 1 = N' ->
  count I Rest N'.
induction on 2. intros C S Minus. S: case S.
  %1:  Slct-First
   IsN: apply count_is_integer to C. C: case C.
     %1.1:  Cnt-ConsEq
      IsN1: apply count_is_integer to C.
      P: apply plus_integer_comm to _ _ C1.
      M2: apply plus_minus_same_integer to _ _ P.
      apply minus_integer_unique to Minus M2. search.
     %1.2:  Cnt-ConsNEq
      apply C to _.
  %2:  Slct-Later
   IsN: apply count_is_integer to C. C: case C.
     %2.1:  Cnt-ConsEq
      IsN1: apply count_is_integer to C.
      P: apply plus_integer_comm to _ _ C1.
      M2: apply plus_minus_same_integer to _ _ P.
      apply minus_integer_unique to Minus M2.
      Sub: apply minus_integer_total to IsN1 _ with N2 = 1.
      C': apply IH to C S Sub.
      P': apply minus_plus_same_integer to _ _ Sub.
      apply count_is_integer to C'.
      apply plus_integer_comm to _ _ P'. search.
     %2.2:  Cnt-ConsNEq
      apply IH to C1 S _. search.


Theorem count_select [Item] : forall (I : Item) L Rest N' N,
  count I Rest N' -> select I Rest L -> 1 + N' = N ->
  count I L N.
induction on 2. intros C S P. S: case S.
  %1:  Slct-First
   search.
  %2:  Slct-Later
   C: case C.
     %2.1:  Cnt-ConsEq
      apply IH to C S _. search.
     %2.2:  Cnt-ConsNEq
      apply IH to C1 S _. search.


Theorem select_count_neq [Item] : forall (I J : Item) L Rest N,
  count I L N -> select J Rest L -> (I = J -> false) ->
  count I Rest N.
induction on 2. intros C S NEq. S: case S.
  %1:  Slct-First
   C: case C.
     %1.1:  Cnt-ConsEq
      apply NEq to _.
     %1.2:  Cnt-ConsNEq
      search.
  %2:  Slct-Later
   C: case C.
     %2.1:  Cnt-ConsEq
      apply IH to C S _. search.
     %2.2:  Cnt-ConsNEq
      apply IH to C1 S _. search.


Theorem count_select_neq [Item] : forall (I J : Item) L Rest N,
  count I Rest N -> select J Rest L -> (I = J -> false) ->
  count I L N.
induction on 2. intros C S NEq. S: case S.
  %1:  Slct-First
   search.
  %2:  Slct-Later
   C: case C.
     %2.1:  Cnt-ConsEq
      apply IH to C S _. search.
     %2.2:  Cnt-ConsNEq
      apply IH to C1 S _. search.


Theorem count_unique [Item] : forall (I : Item) NA NB L,
  count I L NA -> count I L NB -> NA = NB.
induction on 1. intros CA CB. CA: case CA.
  %1:  Cnt-Nil
   case CB. search.
  %2:  Cnt-ConsEq
   CB: case CB.
     %2.1:  Cnt-ConsEq
      apply IH to CA CB. apply plus_integer_unique to CA1 CB1. search.
     %2.2:  Cnt-ConsNEq
      apply CB to _.
  %3:  Cnt-ConsNEq
   CB: case CB.
     %3.1:  Cnt-ConsEq
      apply CA to _.
     %3.2:  Cnt-ConsNEq
      apply IH to CA1 CB1. search.


Theorem count_mem [Item] : forall (I : Item) N L,
  count I L N -> N > 0 -> mem I L.
induction on 1. intros C G. C: case C.
  %1:  Cnt-Nil
   L: apply greater_integer_flip_less to G.
   apply less_integer_not_eq to L.
  %2:  Cnt-ConsEq
   search.
  %3:  Cnt-ConsNEq
   apply IH to C1 _. search.


Theorem count_not_mem [Item] : forall (I : Item) L,
  count I L 0 -> mem I L -> false.
induction on 1. intros C Mem. C: case C.
  %1:  Cnt-Nil
   case Mem.
  %2:  Cnt-ConsEq
   G: apply count_geq_0 to C. IsN: apply count_is_integer to C.
   P:  apply plus_integer_comm to _ _ C1.
   Or: apply greatereq_integer_greater_or_eq to G. G': case Or.
     %2.1:  N > 0
      G'': apply greater_plus_positive to _ _ C1 _. case G''. case H1.
     %2.2:  N = 0
      case P.
  %3:  Cnt-ConsNEq
   Mem: case Mem.
     %3.1:  Mem-Here
      backchain C.
     %3.2:  Mem-Later
      apply IH to C1 Mem.


Theorem count_greater_0 [Item] : forall (I : Item) L N,
  count I (I::L) N -> N > 0.
induction on 1. intros C. C: case C.
  %1:  Cnt-ConsEq
   GEq: apply count_geq_0 to C.
   Or: apply greatereq_integer_greater_or_eq to GEq. G: case Or.
     %N1 > 0
      IsN1: apply count_is_integer to C.
      P: apply plus_integer_comm to _ _ C1.
      G': apply greater_plus_positive to _ _ P _.
      apply greater_integer_transitive to G' G. search.
     %N1 = 0
      P: apply plus_integer_comm to _ _ C1. case P. search.
  %2:  Cnt-ConsNEq
   apply C to _.


Theorem subset_mem [A] : forall (Sub Sup : list A) A,
  subset Sub Sup -> mem A Sub -> mem A Sup.
induction on 1. intros Sub Mem. Sub: case Sub.
  %1:  Sbst-Nil
   case Mem.
  %2:  Sbst-Cons
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Sub1 Mem. search.


Theorem subset_trans [A] : forall (A B C : list A),
  subset A B -> subset B C -> subset A C.
induction on 1. intros SAB SBC. SAB: case SAB.
  %1:  Sbst-Nil
   search.
  %2:  Sbst-Cons
   apply subset_mem to SBC SAB. apply IH to SAB1 SBC. search.


Theorem subset_add_right [A] : forall Sub Sup (A : A),
  subset Sub Sup -> subset Sub (A::Sup).
induction on 1. intros S. S: case S.
  %1:  Sbst-Nil
   search.
  %2:  Sbst-Cons
   apply IH to S1 with A = A. search.


Theorem permutation_counts [Item] : forall L P (I : Item) NL NP,
  permutation L P -> count I L NL -> count I P NP -> NL = NP.
induction on 2. intros P CL CP. CL: case CL.
  %1:  Cnt-Nil
   case P. case CP. search.
  %2:  Cnt-ConsEq
   P: case P. S: case P (keep).
     %2.1:  Slct-First
      CP: case CP.
        %2.1.1:  Cnt-ConsEq
         apply IH to  P1 CL CP. apply plus_integer_unique to CL1 CP1.
         search.
        %2.1.2:  Cnt-ConsNEq
         apply CP to _.
     %2.2:  Slct-Later
      IsNP: apply count_is_integer to CP.
      Minus: apply minus_integer_total to IsNP _ with N2 = 1.
      C': apply select_count to CP P Minus.
      P': apply minus_plus_same_integer to _ _ Minus.
      IsN3: apply minus_integer_is_integer to _ _ Minus.
      Plus: apply plus_integer_comm to _ _ P'. apply IH to P1 CL _.
      apply plus_integer_unique to CL1 Plus. search.
  %3:  Cnt-ConsNEq
   P: case P. C: apply select_count_neq to CP P CL.
   apply IH to P1 CL1 C. search.


Theorem domain_mem [A, B] : forall L (A : A) (B : B) D,
  mem (A, B) L -> domain L D -> mem A D.
induction on 1. intros Mem Dmn. Mem: case Mem.
  %1:  Mem-Here
   case Dmn. search.
  %2:  Mem-Later
   Dmn: case Dmn. apply IH to Mem Dmn. search.


Theorem mem_domain [A, B] : forall (L : list (pair A B)) A D,
  domain L D -> mem A D -> exists B, mem (A, B) L.
induction on 2. intros D M. M: case M.
  %1:  Mem-Here
   case D. search.
  %2:  Mem-Later
   D: case D. apply IH to D M. search.


Theorem domain_select [A, B] :
  forall (L : list (pair A B)) LRest A B D,
    domain L D -> select (A, B) LRest L ->
    exists DRest, select A DRest D /\ domain LRest DRest.
induction on 2. intros Dmn Slct. Slct: case Slct.
  %1:  Slct-First
   case Dmn. search.
  %2:  Slct-Later
   Dmn: case Dmn. apply IH to Dmn Slct. search.


Theorem domain_unique [A, B] : forall (L : list (pair A B)) DA DB,
  domain L DA -> domain L DB -> DA = DB.
induction on 1. intros DmnA DmnB. DmnA: case DmnA.
  %1:  Dmn-Nil
   case DmnB. search.
  %2:  Dmn-Cons
   DmnB: case DmnB. apply IH to DmnA DmnB. search.


Theorem values_mem [A, B] : forall L (A : A) (B : B) V,
  mem (A, B) L -> values L V -> mem B V.
induction on 1. intros Mem Vals. Mem: case Mem.
  %1:  Mem-Here
   case Vals. search.
  %2:  Mem-Later
   Vals: case Vals. apply IH to Mem Vals. search.


Theorem values_select [A, B] :
  forall (L : list (pair A B)) LRest A B V,
    values L V -> select (A, B) LRest L ->
    exists VRest, select B VRest V /\ values LRest VRest.
induction on 2. intros Vals Slct. Slct: case Slct.
  %1:  Slct-First
   case Vals. search.
  %2:  Slct-Later
   Vals: case Vals. apply IH to Vals Slct. search.


Theorem values_unique [A, B] : forall (L : list (pair A B)) VA VB,
  values L VA -> values L VB -> VA = VB.
induction on 1. intros VA VB. VA: case VA.
  %1:  Vals-Nil
   case VB. search.
  %2:  Vals-Cons
   VB: case VB. apply IH to VA VB. search.


Theorem zip_unique [A, B] : forall (L1 : list A) (L2 : list B) LA LB,
  zip L1 L2 LA -> zip L1 L2 LB -> LA = LB.
induction on 1. intros ZA ZB. ZA: case ZA.
  %Zip-Nil
   case ZB. search.
  %Zip-Cons
   ZB: case ZB. apply IH to ZA ZB. search.


Theorem zip_mem_after [A, B] : forall LA LB (A : A) (B : B) Z,
  zip LA LB Z -> mem (A, B) Z -> mem A LA /\ mem B LB.
induction on 1. intros Zip Mem. Zip: case Zip.
  %1:  Zip-Nil
   case Mem.
  %2:  Zip-Cons
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Zip Mem. search.


Theorem zip_mem_before1 [A, B] : forall LA (LB : list B) (A : A) Z,
  zip LA LB Z -> mem A LA -> exists B, mem (A, B) Z.
induction on 1. intros Zip Mem. Zip: case Zip.
  %1:  Zip-Nil
   case Mem.
  %2:  Zip-Cons
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Zip Mem. search.


Theorem zip_mem_before2 [A, B] : forall (LA : list A) LB (B : B) Z,
  zip LA LB Z -> mem B LB -> exists A, mem (A, B) Z.
induction on 1. intros Zip Mem. Zip: case Zip.
  %1:  Zip-Nil
   case Mem.
  %2:  Zip-Cons
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply IH to Zip Mem. search.


Theorem drop_is_integer [A] : forall N (L R : list A),
  drop N L R -> is_integer N.
induction on 1. intros D. D: case D.
  %1:  Drop-0
   search.
  %2:  Drop-Step
   apply IH to D1. apply plus_integer_is_integer to _ _ D. search.


Theorem drop_geq_0 [A] : forall N (L R : list A),
  drop N L R -> N >= 0.
induction on 1. intros D. D: case D.
  %1:  Drop-0
   search.
  %2:  Drop-Step
   GEq: apply IH to D1. LEq: case GEq.
   G: apply greater_integer__add_positive to _ _ D.
   L: apply greater_integer_flip_less to G.
   apply less_integer_lesseq to L. search.


Theorem drop_unique [A] : forall N (L RA RB : list A),
  drop N L RA -> drop N L RB -> RA = RB.
induction on 1. intros DA DB. DA: case DA.
  %1:  Drop-0
   DB: case DB.
     %1.1:  Drop-0
      search.
     %1.2:  Drop-Step
      apply drop_is_integer to DB1. L: apply lt_plus_one to DB _.
      GEq: apply drop_geq_0 to DB1.
      apply greatereq_less_integer_false to GEq L.
  %2:  Drop-Step
   DB: case DB.
     %2.1:  Drop-0
      apply drop_is_integer to DA1. L: apply lt_plus_one to DA _.
      GEq: apply drop_geq_0 to DA1.
      apply greatereq_less_integer_false to GEq L.
     %2.2:  Drop-Step
      apply drop_is_integer to DA1. apply drop_is_integer to DB1.
      apply plus_integer_unique_addend to _ _ _ DA DB.
      apply IH to DA1 DB1. search.


Theorem append_drop [A] : forall N (L1 L2 L : list A),
  L1 ++ L2 = L -> length L1 N -> drop N L L2.
induction on 2. intros App Len. Len: case Len.
  %1:  nil
   case App. search.
  %2:  cons
   App: case App. apply IH to App Len. search.


Theorem take_is_integer [A] : forall N (L F : list A),
  take N L F -> is_integer N.
induction on 1. intros T. T: case T.
  %1:  Take-0
   search.
  %2:  Take-Step
   apply IH to T1. apply plus_integer_is_integer to _ _ T. search.


Theorem take_geq_0 [A] : forall N (L F : list A),
  take N L F -> N >= 0.
induction on 1. intros T. T: case T.
  %1:  Take-0
   search.
  %2:  Take-Step
   GEq: apply IH to T1. LEq: case GEq.
   G: apply greater_integer__add_positive to _ _ T.
   L: apply greater_integer_flip_less to G.
   apply less_integer_lesseq to L. search.


Theorem take_unique [A] : forall N (L RA RB : list A),
  take N L RA -> take N L RB -> RA = RB.
induction on 1. intros TA TB. TA: case TA.
  %1:  Take-0
   TB: case TB.
     %1.1:  Take-0
      search.
     %1.2:  Take-Step
      apply take_is_integer to TB1. L: apply lt_plus_one to TB _.
      GEq: apply take_geq_0 to TB1.
      apply greatereq_less_integer_false to GEq L.
  %2:  Take-Step
   TB: case TB.
     %2.1:  Take-0
      apply take_is_integer to TA1. L: apply lt_plus_one to TA _.
      GEq: apply take_geq_0 to TA1.
      apply greatereq_less_integer_false to GEq L.
     %2.2:  Take-Step
      apply take_is_integer to TA1. apply take_is_integer to TB1.
      apply plus_integer_unique_addend to _ _ _ TA TB.
      apply IH to TA1 TB1. search.


Theorem take_length [A] : forall N (L R : list A),
  take N L R -> length R N.
induction on 1. intros T. T: case T.
  %Take-0
   search.
  %Take-Step
   L: apply IH to T1. search.


Theorem append_take [A] : forall N (L1 L2 L : list A),
  L1 ++ L2 = L -> length L1 N -> take N L L1.
induction on 2. intros App Len. Len: case Len.
  %nil
   search.
  %cons
   App: case App. apply IH to App Len. search.


Theorem range_is : forall Low High R,
  is_integer Low -> range Low High R -> is_list is_integer R.
induction on 2. intros IsLow R. R: case R.
  %1:  Range-End
   search.
  %2:  Range-Step
   IsPlusOne: apply plus_integer_is_integer to _ _ R1.
   apply IH to IsPlusOne R2. search.


Theorem is_list_int_mem : forall L (X : integer),
  is_list is_integer L -> mem X L -> is_integer X.
induction on 2. intros IsL Mem. Mem: case Mem.
  %1:  Mem-Here
   case IsL. search.
  %2:  Mem-Later
   Is: case IsL. apply IH to _ Mem. search.


Theorem range_low_lesseq : forall Low High R X,
  is_integer Low -> range Low High R -> mem X R -> Low <= X.
induction on 3. intros IsLow Range Mem.
apply range_is to IsLow Range. IsX: apply is_list_int_mem to _ Mem.
Mem: case Mem.
  %1:  Mem-Here
   R: case Range. apply is_integer_lesseq to IsX. search.
  %2:  Mem-Later
   R: case Range. apply plus_integer_is_integer to _ _ R1.
   LEq: apply IH to _ R2 Mem. L: apply lt_plus_one to R1 _.
   LEq': apply less_integer_lesseq to L.
   apply lesseq_integer_transitive to LEq' LEq. search.


Theorem range_high_lesseq : forall Low High R X,
  is_integer Low -> range Low High R -> mem X R -> X <= High.
induction on 2. intros IsLow Range Mem. Range: case Range.
  %1:  Range-End
   case Mem.
  %2:  Range-Step
   Mem: case Mem.
     %2.1:  Mem-Here
      search.
     %2.2:  Mem-Later
      apply plus_integer_is_integer to _ _ Range1.
      apply IH to _ Range2 Mem. search.


Theorem in_range : forall Low High R X,
  is_integer Low -> is_integer X ->
  range Low High R -> Low <= X -> X <= High ->
  mem X R.
induction on 3. intros IsLow IsX R LowX XHigh. R: case R.
  %1:  Range-End
   L: apply lesseq_integer_transitive to LowX XHigh.
   apply greater_lesseq_integer_false to R L.
  %2:  Range-Step
   Or: apply lesseq_integer_less_or_eq to LowX. L: case Or.
     %2.1:  Low X X
      P: apply plus_integer_comm to _ _ R1.
      IsPlusOne: apply plus_integer_is_integer to _ _ P.
      apply less_lesseq_plus_one to _ _ L P.
      apply IH to _ _ R2 _ _. search.
     %2.2:  Low = X
      search.


Theorem range_unique : forall Low High R1 R2,
  range Low High R1 -> range Low High R2 -> R1 = R2.
induction on 1. intros RA RB. RA: case RA.
  %1:  Range-End
   RB: case RB.
     %1.1:  Range-End
      search.
     %1.2:  Range-Step
      apply greater_lesseq_integer_false to RA RB.
  %2:  Range-Step
   RB: case RB.
     %2.1:  Range-End
      apply greater_lesseq_integer_false to RB RA.
     %2.2:  Range-Step
      apply plus_integer_unique to RA1 RB1. apply IH to RA2 RB2.
      search.


Theorem range_smaller_exists : forall Low High R Low',
  is_integer Low -> is_integer Low' -> range Low High R ->
  Low < Low' -> exists R', range Low' High R'.
induction on 3. intros IsLow IsLow' R L. R: case R.
  %1:  Range-End
   G: apply less_integer_flip_greater to L.
   apply greater_integer_transitive to G R. search.
  %2:  Rande-Step
   IsPlusOne: apply plus_integer_is_integer to _ _ R1.
   P: apply plus_integer_comm to _ _ R1.
   LEq: apply less_lesseq_plus_one to _ _ L P.
   Or: apply lesseq_integer_less_or_eq to LEq. L: case Or.
     %2.1:  PlusOne < Low'
      apply IH to _ _ R2 L1. search.
     %2.2:  PlusOne = Low'
      search.


Theorem range_subset : forall Low Low' High R R',
  is_integer Low -> is_integer Low' ->
  range Low High R -> range Low' High R' -> Low < Low' ->
  subset R' R.
induction on 4. intros IsLow IsLow' R R' L. R': case R'.
  %1:  Range-End
   search.
  %2:  Range-Step
   P: apply plus_integer_comm to _ _ R'1.
   LEq: apply less_integer_lesseq to L.
   M: apply in_range to _ _ R _ R'. L': apply lt_plus_one to R'1 _.
   apply less_integer_transitive to L L'.
   apply plus_integer_is_integer to _ _ R'1. apply IH to _ _ R R'2 _.
   search.


Theorem range_select_unique : forall Low High R X Rest Rest',
  is_integer Low -> range Low High R ->
  select X Rest R -> select X Rest' R ->
  Rest = Rest'.
induction on 2. intros IsLow Range Slct Slct'. Range: case Range.
  %1:  Range-End
   case Slct.
  %2:  Range-Step
   Slct: case Slct.
     %2.1:  Slct-First
      Slct': case Slct'.
        %2.1.1:  Slct-First
         search.
        %2.1.2:  Slct-Later
         L: apply lt_plus_one to Range1 _.
         M: apply select_mem to Slct'.
         IsPlusOne: apply plus_integer_is_integer to _ _ Range1.
         LEq: apply range_low_lesseq to _ Range2 M.
         G: apply less_integer_flip_greater to L.
         apply greater_lesseq_integer_false to G LEq.
     %2.2:  Slct-Later
      Slct': case Slct'.
        %2.2.1:  Slct-First
         L: apply lt_plus_one to Range1 _.
         M: apply select_mem to Slct.
         IsPlusOne: apply plus_integer_is_integer to _ _ Range1.
         LEq: apply range_low_lesseq to _ Range2 M.
         G: apply less_integer_flip_greater to L.
         apply greater_lesseq_integer_false to G LEq.
        %2.2.2:  Slct-Later
         apply plus_integer_is_integer to _ _ Range1.
         apply IH to _ Range2 Slct Slct'. search.


Theorem range_exists : forall Low High,
  is_integer Low -> is_integer High -> exists R, range Low High R.
assert forall Low High Diff,
          is_integer Low -> is_integer High ->
          High - Low = Diff -> acc Diff ->
          exists R, range Low High R.
  induction on 4. intros IsLow IsHigh Minus Acc.
  Or: apply integer_compare_total to IsLow IsHigh. Comp: case Or.
    %Low <= High
     P: apply plus_integer_total to _ IsLow with N1 = 1.
     IsN3: apply plus_integer_is_integer to _ _ P.
     LowN3: apply lt_plus_one to P _.
     Minus': apply minus_integer_total to IsHigh IsN3.
     L: apply minus_larger to _ Minus Minus' LowN3. Acc: case Acc.
     Or: apply integer_compare_total to IsN3 IsHigh. Comp: case Or.
       %N3 <= High
        Or: apply lesseq_integer_less_or_eq to Comp1. L': case Or.
          %N3 < High
           L0N1: apply minus_smaller_positive to Minus' L'.
           LEq: apply less_integer_lesseq to L0N1.
           A: apply Acc to LEq L. apply IH to _ _ Minus' A. search.
          %N3 = High
           M: apply minus_integer_same to IsHigh.
           apply minus_integer_unique to M Minus'.
           A: apply Acc to _ L. apply IH to _ _ Minus' A. search.
       %N3 > High
        search.
    %Low > High
     search.
intros IsLow IsHigh. Minus: apply minus_integer_total to IsHigh IsLow.
IsN3: apply minus_integer_is_integer to _ _ Minus.
Or: apply integer_compare_total to _ IsN3 with A = 0. Comp: case Or.
  %2:  0 <= N3
   apply all_acc to IsN3 Comp. apply H1 to _ _ Minus _. search.
  %0 > N3
   NegN3: apply greater_integer_flip_less to Comp.
   apply minus_integer_diff_neg to NegN3 Minus. search.
