Module sec_SOS:list

Builds on sec_SOS:host

/*New Expressions and Projections*/
e ::= ...
    | nil
    | cons(e, e)
    | null(e)
    | head(e)
    | tail(e)
    | index(e, e) /*lst[i]*/
    | length(e)


--------------------------------------------- [Proj-Nil]
|{e}- nil ~~>
      recBuild(addRecFieldExprs("null", true,
               endRecFieldExprs))


---------------------------------------------------------- [Proj-Cons]
|{e}- cons(E1, E2) ~~>
      recBuild(
         addRecFieldExprs("null", false,
         addRecFieldExprs("head", E1,
         addRecFieldExprs("tail", E2, endRecFieldExprs))))


------------------- [Proj-Null]
|{e}- null(E) ~~> E


------------------- [Proj-Head]
|{e}- head(E) ~~> E


------------------- [Proj-Tail]
|{e}- tail(E) ~~> E


/*To actually compute the length or index from records would require
  conditionals, so we'll take advantage of the lax projection
  constraints and project to something unrelated to the actual
  value.*/
-------------------------------------------------- [Proj-Index]
|{e}- index(Lst, Index) ~~> and(null(Lst),
                                eq(num(0), Index))


--------------------- [Proj-Length]
|{e}- length(E) ~~> E



/*New Statement and Projection*/
/*c ::= ...
    | listUpdate(string, int, e)*/ /*lst[i] = e*/
/*
  Adding this listUpdate would break our projection constraint for
  statements that the evaluation contexts coming out of the original
  and projection must have the same values for all the variables.
  This is because the result of the listUpdate would have the updated
  var be a list value, while the projection would have the updated
  var be a record value.

  You can do this more verbosely with a loop.  Maybe we could do this?
  Projection would probably need to depend on the typing context to
  be sure you were adding a fresh variable for the loop counter.
*/



/*New Type and Projection*/
ty ::= ...
     | listTy(ty)


/*Strictly speaking, an empty list doesn't have the head or tail
  fields.  However, we don't have any projection constraints, so we
  can do whatever we want, and this is close.*/
----------------------------------------------- [Proj-ListTy]
|{ty}- listTy(T) ~~>
       recTy([("head", T), ("tail", listTy(T)),
              ("null", boolTy)])



/*New Value and Projections*/
value ::= ...
        | nilVal
        | consVal(value, value)


------------------------------------------------ [Proj-NilVal]
|{value}- nilVal ~~> recVal([("null", trueVal)])


--------------------------------------------- [Proj-ConsVal]
|{value}- consVal(Hd, Tl) ~~>
          recVal([("head", Hd), ("tail", Tl),
                  ("null", falseVal)])
