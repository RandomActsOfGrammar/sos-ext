Module sec_SOS:list.


Prove_Constraint sec_SOS:host:trans_e_unique.
%nil
 case Hyp1. search.
%cons
 case Hyp1. search.
%null
 case Hyp1. search.
%head
 case Hyp1. search.
%tail
 case Hyp1. search.
%index
 case Hyp1. search.
%length
 case Hyp1. search.
Prove_Constraint sec_SOS:host:trans_e_is.
%nil
 search 8. %too big to solve at default depth
%cons
 case Hyp1. search 10. %too big
%null
 case Hyp1. search 7.
%head
 case Hyp1. search 7.
%tail
 case Hyp1. search 7.
%index
 case Hyp1. search.
%length
 case Hyp1. search.


Prove_Constraint sec_SOS:host:trans_rf_unique.
Prove_Constraint sec_SOS:host:trans_rf_is.
Prove_Constraint sec_SOS:host:trans_c_unique.
Prove_Constraint sec_SOS:host:trans_c_is.
Prove_Constraint sec_SOS:host:trans_recFields_unique.
Prove_Constraint sec_SOS:host:trans_recFields_is.


Prove_Constraint sec_SOS:host:trans_ty_unique.
%listTy
 case Hyp1. search.
Prove_Constraint sec_SOS:host:trans_ty_is.
%listTy
 case Hyp1. search 11.


Prove_Constraint sec_SOS:host:trans_value_unique.
%nilVal
 case Hyp1. search.
%consVal
 case Hyp1. search.
Prove_Constraint sec_SOS:host:trans_value_is.
%nilVal
 search 9.
%consVal
 case Hyp1. search 11.

Prove sec_SOS:host:vars_join,
      sec_SOS:host:vars_rf_join.
%vars_join
 %nil
  search.
 %cons
  J2: apply IH to Vars2 with D = D. J1: apply IH to Vars1 with D = D'.
  JApp: apply append_associative_back to J2 J1.
  apply append_unique to Vars3 JApp. search.
 %null
  apply IH to Vars1 with D = D. search.
 %head
  apply IH to Vars1 with D = D. search.
 %tail
  apply IH to Vars1 with D = D. search.
 %index
  J2: apply IH to Vars2 with D = D. J1: apply IH to Vars1 with D = D'.
  JApp: apply append_associative_back to J2 J1.
  apply append_unique to Vars3 JApp. search.
 %length
  apply IH to Vars1 with D = D. search.


Prove sec_SOS:host:vars_unique,
      sec_SOS:host:vars_rf_unique.
%vars_unique
 %nil
  case Vars2. search.
 %cons
  Vars2: case Vars2. apply IH to Vars3 Vars2. apply IH to Vars4 Vars6.
  apply append_unique to Vars5 Vars7. search.
 %null
  Vars2: case Vars2. apply IH to Vars3 Vars2. search.
 %head
  Vars2: case Vars2. apply IH to Vars3 Vars2. search.
 %tail
  Vars2: case Vars2. apply IH to Vars3 Vars2. search.
 %index
  Vars2: case Vars2. apply IH to Vars3 Vars2. apply IH to Vars4 Vars6.
  apply append_unique to Vars5 Vars7. search.
 %length
  Vars2: case Vars2. apply IH to Vars3 Vars2. search.


Prove_Constraint sec_SOS:host:trans_e_vars_exist.
%nil
 search.
%cons
 case Hyp1. exists V. unfold. unfold. exists V, []. split.
   %vars_rf {head: E1; tail: E2} V
    unfold. exists D2, D1. split.
      %vars {tail: E2} D1
       unfold. exists [], D2. split. search. search.
       apply vars_join to H2 with D = [].
       apply append_nil_right to H4. search.
      %vars E1 D1
       search.
      %D1 ++ D2 = V
       search.
   %vars false []
    search.
   %empty ++ V = V
    search.
%null
 case Hyp1. search.
%head
 case Hyp1. search.
%tail
 case Hyp1. search.
%index
 Vars: case Hyp1. search.
%length
 case Hyp1. search.
Prove_Constraint sec_SOS:host:trans_e_vars.
%nil
 case Hyp2. case H1. case H2. case H3. case H4. case Hyp1. search.
%cons
 VarsCons: case Hyp1. case Hyp2. case H1. case H3. case H2. case H5.
 case H8. apply vars_unique to VarsCons H6.
 apply vars_unique to VarsCons1 H9.
 apply append_nil_right to H10. case H4.
 Or: apply mem_append to Hyp3 VarsCons2. MemOr: case Or.
   %mem X DE1
    apply mem_append_left to MemOr H7. search.
   %mem X DRest1
    apply mem_append_right to MemOr H7. search.
%null
 case Hyp1. apply vars_unique to H1 Hyp2. search.
%head
 case Hyp1. apply vars_unique to H1 Hyp2. search.
%tail
 case Hyp1. apply vars_unique to H1 Hyp2. search.
%index
 VI: case Hyp1. VT: case Hyp2. VIdx2: case VT1. case VIdx2.
 VLst2: case VT. case VIdx3. apply vars_unique to VI VLst2.
 apply vars_unique to VI1 VIdx1. apply append_unique to VI2 VT2.
 search.
%length
 case Hyp1. apply vars_unique to Hyp2 H1. search.
Prove_Constraint sec_SOS:host:trans_rf_vars_exist.
Prove_Constraint sec_SOS:host:trans_rf_vars.


Prove sec_SOS:host:vars_is,
      sec_SOS:host:vars_rf_is.
%vars_is
  %nil list
   search.
  %cons list
   IsE1: case IsE. IsD1: apply IH to IsE1 Vars1.
   IsD2: apply IH to IsE2 Vars2.
   apply append__is_list__is_string to IsD1 IsD2 Vars3. search.
  %null check
   IsE1: case IsE. apply IH to IsE1 Vars1. search.
  %head of list
   IsE1: case IsE. apply IH to IsE1 Vars1. search.
  %tail of list
   IsE1: case IsE. apply IH to IsE1 Vars1. search.
  %index into list
   IsE1: case IsE. IsD1: apply IH to IsE1 Vars1.
   IsD2: apply IH to IsE2 Vars2.
   apply append__is_list__is_string to IsD1 IsD2 Vars3. search.
  %length of list
   IsE1: case IsE. apply IH to IsE1 Vars1. search.


Prove sec_SOS:host:vars_exist,
      sec_SOS:host:vars_rf_exist.
%vars_exist
  %nil list
   search.
  %cons list
   Vars1: apply IH to IsE1. Vars2: apply IH to IsE2.
   IsV: apply vars_is to IsE1 Vars1.
   IsV1: apply vars_is to IsE2 Vars2.
   apply append__is_list__is_string__total to IsV IsV1. search.
  %null check
   apply IH to IsE1. search.
  %head of list
   apply IH to IsE1. search.
  %tail of list
   apply IH to IsE1. search.
  %index into list
   Vars1: apply IH to IsE1. Vars2: apply IH to IsE2.
   IsV: apply vars_is to IsE1 Vars1.
   IsV1: apply vars_is to IsE2 Vars2.
   apply append__is_list__is_string__total to IsV IsV1. search.
  %length of list
   apply IH to IsE1. search.


Prove sec_SOS:host:typeOf_unique,
      sec_SOS:host:typeRecFields_unique.
%typeOf_unique
  %nil list
   Ty2: case Ty2. skip. %This isn't actually true
  %cons list
   Ty2: case Ty2. apply IH to Ty3 Ty2. apply IH to Ty4 Ty5. search.
  %null check
   Ty2: case Ty2. search.
  %head of list
   Ty2: case Ty2. apply IH to Ty3 Ty2. search.
  %tail of list
   Ty2: case Ty2. apply IH to Ty3 Ty2. search.
  %index into list
   Ty2: case Ty2. apply IH to Ty3 Ty2. search.
  %length of list
   Ty2: case Ty2. search.


Prove sec_SOS:host:typeOK_unique.


Prove_Constraint sec_SOS:host:trans_eval_e.
%nil
 search.
%cons
 Ev: case Hyp1. search.
%null
 case Hyp1.
   %E-NullTrue
    search.
   %E-NullFalse
    search.
%head
 case Hyp1. search.
%tail
 case Hyp1. search.
%index
 Ev: case Hyp1. search.
%length
 Ev: case Hyp1. search.


Extensible_Theorem
  index_is_integer : forall L I V,
    Index : indexRel L I V ->
    is_integer I
  on Index.
%Index-0
 search.
%Index-Step
 IsSubIndex: apply IH to Index2.
 Is: apply minus_integer_is_integer_result to IsSubIndex Index1.
 search.
%Preservability
 backchain IH.
Extensible_Theorem
  index_negative_false : forall L I V,
    Index : indexRel L I V ->
    Neg : I < 0 ->
    false
  on Index.
%Index-0
 case Neg.
%Index-Step
 apply index_is_integer to Index.
 apply less_integer__subtract_positive to _ _ Neg _ Index1.
 apply minus_integer_is_integer to _ _ Index1.
 apply IH to Index2 _.
%Preservability
 apply IH to Index2 Neg.
Extensible_Theorem
  index_unique : forall L I V1 V2,
    Index1 : indexRel L I V1 ->
    Index2 : indexRel L I V2 ->
    V1 = V2
  on Index1.
%1 by Index-0
 Index2: case Index2.
   %2 by Index-0
    search.
   %2 by Index-Step
    case Index2. case H1. apply index_negative_false to Index3 _.
%1 by Index-Step
 Index2: case Index2.
   %2 by Index-0
    case Index3. case H1. apply index_negative_false to Index4 _.
   %2 by Index-Step
    apply minus_integer_unique to Index3 Index2.
    apply IH to Index4 Index5. search.
%Preservability
 Index2: case Index2. apply trans_value_unique to Index3 Index2.
 apply IH to Index4 Index5. search.

Extensible_Theorem
  length_is_integer : forall L V,
    Len : lengthRel L V ->
    is_integer V
  on Len.
%Len-Nil
 search.
%Len-Cons
 IsSubLen: apply IH to Len1.
 apply plus_integer_is_integer to _ _ Len2. search.
%Preservability
 apply IH to Len2. search.
Extensible_Theorem
  length_unique : forall L V1 V2,
    Len1 : lengthRel L V1 ->
    Len2 : lengthRel L V2 ->
    V1 = V2
  on Len1.
%1 by Len-Nil
 case Len2. search.
%1 by Len-Cons
 Len2: case Len2. apply IH to Len3 Len2.
 apply plus_integer_unique to Len4 Len5. search.
%Preservability
 Len2: case Len2. apply trans_value_unique to Len3 Len2.
 apply IH to Len4 Len5. search.


Prove sec_SOS:host:eval_e_unique,
      sec_SOS:host:eval_rf_unique.
%eval_e_unique
  %E-Nil
   case Ev2. search.
  %E-Cons
   Ev2: case Ev2. apply IH to Ev3 Ev2. apply IH to Ev4 Ev5. search.
  %E-NullTrue
   Ev2: case Ev2.
     %2 by E-NullTrue
      search.
     %2 by E-NullFalse
      apply IH to Ev3 Ev2.
  %E-NullFalse
   Ev2: case Ev2.
     %2 by E-NullTrue
      apply IH to Ev3 Ev2.
     %2 by E-NullFalse
      search.
  %E-Head
   Ev2: case Ev2. apply IH to Ev3 Ev2. search.
  %E-Tail
   Ev2: case Ev2. apply IH to Ev3 Ev2. search.
  %E-Index
   Ev2: case Ev2. apply IH to Ev3 Ev2. apply IH to Ev4 Ev6.
   apply index_unique to Ev5 Ev7. search.
  %E-Length
   Ev2: case Ev2. apply IH to Ev3 Ev2.
   apply sec_SOS:list:length_unique to Ev4 Ev5. search.


Prove sec_SOS:host:update_rec_fields_unique.


Prove_Constraint sec_SOS:host:trans_c_eval.


Prove_Ext_Ind sec_SOS:host:eval_c.


Prove sec_SOS:host:eval_c_unique.


Prove_Constraint sec_SOS:host:trans_c_eval_results.
Prove_Constraint sec_SOS:host:trans_c_eval_results_back.


Prove sec_SOS:host:vars_eval_same_result,
      sec_SOS:host:vars_equal_rf_same_result.
%vars_eval_same_result
  %E-Nil
   case Ev2. search.
  %E-Cons
   Ev2: case Ev2. Vars1: case Vars.
   apply IH to _ Vars1 Ev3 Ev2. backchain vars_equiv_left.
   apply IH to _ Vars2 Ev4 Ev5. backchain vars_equiv_right. search.
  %E-NullTrue
   Ev2: case Ev2.
     %2 by E-NullTrue
      search.
     %2 by E-NullFalse
      Vars1: case Vars. apply IH to _ Vars1 Ev3 Ev2.
  %E-NullFalse
   Ev2: case Ev2.
     %2 by E-NullTrue
      Vars1: case Vars. apply IH to _ Vars1 Ev3 Ev2.
     %2 by E-NullFalse
      search.
  %E-Head
   Ev2: case Ev2. Vars1: case Vars. apply IH to _ Vars1 Ev3 Ev2.
   search.
  %E-Tail
   Ev2: case Ev2. Vars1: case Vars. apply IH to _ Vars1 Ev3 Ev2.
   search.
  %E-Index
   Ev2: case Ev2. Vars1: case Vars.
   apply IH to _ Vars1 Ev3 Ev2. backchain vars_equiv_left.
   apply IH to _ Vars2 Ev4 Ev6. backchain vars_equiv_right.
   apply index_unique to Ev5 Ev7. search.
  %E-Length
   Ev2: case Ev2. Vars1: case Vars. apply IH to _ Vars1 Ev3 Ev2.
   apply sec_SOS:list:length_unique to Ev4 Ev5. search.
