Module sec_SOS:host

Judgment typeOf : [(string, ty)] e* ty
Judgment typeRecFields : {[(string, ty)] recFieldExprs*
                          [(string, ty)]}
Judgment typeOK : [(string, ty)] c* [(string, ty)]


/*Expression Typing*/

--------------------- [T-Num]
typeOf G num(I) intTy


typeOf G E1 intTy
typeOf G E2 intTy
--------------------------- [T-Plus]
typeOf G plus(E1, E2) intTy


lookup G X Ty
------------------- [T-Name]
typeOf G name(X) Ty


typeOf G E1 intTy
typeOf G E2 intTy
------------------------------- [T-Greater]
typeOf G greater(E1, E2) boolTy


typeOf G E1 Ty
typeOf G E2 Ty
---------------------- [T-Eq]
typeOf G eq(E1, E2) Ty


typeOf G E1 boolTy
typeOf G E2 boolTy
--------------------------- [T-And]
typeOf G and(E1, E2) boolTy


typeOf G E1 boolTy
typeOf G E2 boolTy
-------------------------- [T-Or]
typeOf G or(E1, E2) boolTy


-------------------- [T-True]
typeOf G true boolTy


--------------------- [T-False]
typeOf G false boolTy


typeRecFields G Fields FTys
------------------------------------- [T-RecBuild]
typeOf G recBuild(Fields) recTy(FTys)


typeOf G Rec recTy(Fields)
lookup Fields Field FTy
--------------------------------------- [T-RecField]
typeOf G recFieldAccess(Rec, Field) FTy



/*Record Field Typing*/

----------------------------------- [TRF-End]
typeRecFields G endRecFieldExprs []


typeOf G E Ty
typeRecFields G Rest FTys
no_lookup FTys L /*each label only occurs once*/
---------------------------------------------------------- [TRF-Add]
typeRecFields G addRecFieldExprs(L, E, Rest) (L, Ty)::FTys



/*Statement Typing*/

--------------- [T-Noop]
typeOK G noop G


typeOK G C1 G1
typeOK G1 C2 G2
----------------------- [T-Seq]
typeOK G seq(C1, C2) G2


no_lookup G X /*can't overwrite existing decls*/
typeOf G E Ty
------------------------------------- [T-Declare]
typeOK G declare(X, Ty, E) (X, Ty)::G


typeOf G E Ty
lookup G X Ty
----------------------- [T-Assign]
typeOK G assign(X, E) G


typeOf G Cond boolTy
typeOK G Then GT
typeOK G Else GE
--------------------------------------- [T-IfThenElse]
typeOK G ifThenElse(Cond, Then, Else) G
/*branches open new scopes*/


typeOf G Cond boolTy
typeOK G Body GB
---------------------------- [T-While]
typeOK G while(Cond, Body) G
/*body opens a new scope*/


lookup G Rec recTy(FFields)
checkRecUpdate Fields FFields Ty
typeOf G E Ty
------------------------------------ [T-RecUpdate]
typeOK G recUpdate(Rec, Fields, E) G



/*Check whether the update to the nested fields is valid
  The tyctx is the fields of the record*/
Judgment checkRecUpdate : recFields* [(string, ty)] ty

lookup RecFieldTys F Ty
----------------------------------------- [CRU-OneField]
checkRecUpdate oneField(F) RecFieldTys Ty


lookup RecFieldTys F recTy(FFieldTys)
checkRecUpdate Rest FFieldTys Ty
----------------------------------------------- [CRU-AddField]
checkRecUpdate addField(F, Rest) RecFieldTys Ty




/*Typing for values to allow type soundness*/
Judgment typeOfVal : value* ty

------------------------- [TV-Int]
typeOfVal intVal(I) intTy


------------------------ [TV-True]
typeOfVal trueVal boolTy


------------------------- [TV-False]
typeOfVal falseVal boolTy


typeOfEvalctx Fields FTys
------------------------------------ [TV-Rec]
typeOfVal recVal(Fields) recTy(FTys)




/*Typing for evaluation contexts to allow type soundness and recVal
  typing*/
Fixed Judgment typeOfEvalctx : [(string, value)] [(string, ty)]

=================== [TEC-Empty]
typeOfEvalctx [] []


typeOfVal V Ty
typeOfEvalctx Rest RestTys
=========================================== [TEC-Add]
typeOfEvalctx (X, V)::Rest (X, Ty)::RestTys

