Module functions:security

Builds on functions:host

/*New Statement and Translation*/
c ::= ...
    | declareSec(string, seclevel, ty, e)


--------------------------------------------------- [Trans-DeclareSec]
|{c}- declareSec(X, S, Ty, E) ~~> declare(X, Ty, E)


/*New way to declare function parameters*/
params ::= ...
         | addSecParams(string, seclevel, ty, params)


------------------------------------------- [Trans-AddSecParams]
|{params}- addSecParams(X, S, Ty, Rest) ~~>
           addParams(X, Ty, Rest)


/*New way to declare a function, with a minimum program counter to 
  start checking*/
fun ::= ...
      | secfun(string, seclevel, ty, seclevel, string, params, c)

------------------------------------------------------- [Trans-Secfun]
|{fun}- secfun(Name, Sec, RetTy, RetSec, RetName, Params, Body) ~~>
        fun(Name, RetTy, RetName, Params, Body)


seclevel ::= public | private
Translation seclevel :




/*Typing and Evaluation for New Statement*/

no_lookup G X /*still can't overwrite existing decls*/
typeOf FG G E Ty
------------------------------------------------ [T-DeclareSec]
typeOK FG G declareSec(X, S, Ty, E) (|X, Ty|)::G


eval_e FG G E V O
------------------------------------------------- [E-DeclareSec]
eval_c FG G declareSec(X, S, Ty, E) (|X, V|)::G O



/*Host Relations for New Parameter*/

paramsToTyList Rest TRest
----------------------------------------------------- [PtTL-AddSec]
paramsToTyList addSecParams(X, S, Ty, Rest) Ty::TRest


paramsToTyCtx Rest TRest
-------------------------------------------------------- [PtTC-AddSec]
paramsToTyCtx addSecParams(X, S, Ty, Rest) (|X, Ty|)::TRest


paramsToNameList Rest NRest
------------------------------------------------------ [PtNL-AddSec]
paramsToNameList addSecParams(X, S, Ty, Rest) X::NRest



/*Host Relations for New Fun*/

paramsToTyCtx Params G
typeOK FG (|RetName, RetTy|)::G Body G2 /*ret name declared*/
------------------------------------------------------------ [T-Secfun]
funTyOK FG secfun(Name, Level, RetTy, RetSec, RetName, Params, Body)


paramsToTyList Params ArgTys
--------------------------------------------------------- [GFT-Secfun]
getFunTy secfun(Name, Level, RetTy, RetSec, RetName, Params, Body
               ) Name RetTy ArgTys


paramsToNameList Params Names
--------------------------------------------------------- [EF-Secfun]
eval_fun secfun(Name, Level, RetTy, RetSec, RetName, Params, Body
               ) Name RetName Names Body

