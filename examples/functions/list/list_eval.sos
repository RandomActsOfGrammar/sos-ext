Module functions:list

/*Expression Evaluation*/

---------------------------------- [E-Nil]
eval_e FG G nil nilVal emptyOutput


eval_e FG G E1 V1 O1
eval_e FG G E2 V2 O2
appendOutput O1 O2 O
------------------------------------------ [E-Cons]
eval_e FG G cons(E1, E2) consVal(V1, V2) O


eval_e FG G E nilVal O
----------------------------- [E-NullTrue]
eval_e FG G null(E) trueVal O


eval_e FG G E consVal(V1, V2) O
------------------------------- [E-NullFalse]
eval_e FG G null(E) falseVal O


eval_e FG G E consVal(V1, V2) O
------------------------------- [E-Head]
eval_e FG G head(E) V1 O


eval_e FG G E consVal(V1, V2) O
------------------------------- [E-Tail]
eval_e FG G tail(E) V2 O


eval_e FG G E1 ListVal O1
eval_e FG G E2 intVal(I) O2
index ListVal I V
appendOutput O1 O2 O
----------------------------- [E-Index]
eval_e FG G index(E1, E2) V O


eval_e FG G E ListVal O
length ListVal Length
-------------------------------------- [E-Length]
eval_e FG G length(E) intVal(Length) O


/*Support for list expression evaluation*/
Judgment index : value* int value

-------------------------- [Index-0]
index consVal(Hd, Tl) 0 Hd


Index - 1 = SubIndex
index Tl SubIndex V
----------------------------- [Index-Step]
index consVal(Hd, Tl) Index V


|{value}- V ~~> VT
index VT I Result
------------------ [Index-D]*
index V I Result


Judgment length : value* int

--------------- [Len-Nil]
length nilVal 0


length Tl SubLen
SubLen + 1 = Len
-------------------------- [Len-Cons]
length consVal(Hd, Tl) Len


|{value}- V ~~> VT
length VT Len
------------------ [Len-D]*
length V Len




/*Value Equality*/

-------------------- [VE-NilVal]
val_eq nilVal nilVal


val_eq V11 V21
val_eq V12 V22
------------------------------------------ [VE-ConsVal]
val_eq consVal(V11, V12) consVal(V21, V22)

