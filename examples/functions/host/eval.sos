Module functions:host

functx ::= emptyFun
         | addFun(string, string, [string], c, functx)
                /*fun name, ret name, params, body, rest*/
Projection functx :


Judgment lookupFun : functx* string string [string] c
                   /*functx fun name, ret name, param names, body*/

------------------------------------------------------ [LF-Here]
lookupFun addFun(F, Ret, NL, Body, Rest) F Ret NL Body


lookupFun Rest X XRet XNL XBody
X != Y
----------------------------------------------------------- [LF-Later]
lookupFun addFun(Y, YRet, YNL, YBody, Rest) X XRet XNL Body


Judgment paramsToNameList : params* [string]

----------------------------- [PtNL-End]
paramsToNameList endParams []


paramsToNameList Rest NRest
------------------------------------------------ [PtNL-Add]
paramsToNameList addParams(X, Ty, Rest) X::NRest



/*Output from the program printing*/
output ::= emptyOutput
         | addOutput(output, value) /*snoc for appending always*/
Projection output :

Judgment appendOutput : output output* output

---------------------------- [AO-Empty]
appendOutput O emptyOutput O


appendOutput O1 O2 O3
------------------------------------------------- [AO-Add]
appendOutput O1 addOutput(O2, V) addOutput(O3, V)




/*Expressions need output, functx because of function calls*/
Judgment eval_e : functx [(string, value)] e* value output
Judgment eval_rf : functx [(string, value)] recFieldExprs* [(string, value)] output
/*given arguments and names, produce an eval ctx for the function*/
Judgment eval_args : functx [(string, value)] args* [string] [(string, value)] output
/*Statements produce a new eval ctx and some output*/
Judgment eval_c : functx [(string, value)] c* [(string, value)] output
/*get the evaluation information from a function
  (name, return name, parameter names, body)*/
Judgment eval_fun : fun* string string [string] c
/*evaluate a program to find its output under a fun ctx*/
Judgment eval_program : [value] functx program* output
/*Evaluate a full program to get its output*/
Fixed Judgment full_eval : [value] program output


/*Expression Evaluation*/

---------------------------------------- [E-Num]
eval_e FG G num(I) intVal(I) emptyOutput


eval_e FG G E1 intVal(I1) O1
eval_e FG G E2 intVal(I2) O2
I1 + I2 = I
appendOutput O1 O2 O
------------------------------------ [E-Plus]
eval_e FG G plus(E1, E2) intVal(I) O


lookup G X V
--------------------------------- [E-Name]
eval_e FG G name(X) V emptyOutput


eval_e FG G E1 intVal(I1) O1
eval_e FG G E2 intVal(I2) O2
I1 > I2
appendOutput O1 O2 O
------------------------------------- [E-GreaterTrue]
eval_e FG G greater(E1, E2) trueVal O


eval_e FG G E1 intVal(I1) O1
eval_e FG G E2 intVal(I2) O2
I1 <= I2
appendOutput O1 O2 O
-------------------------------------- [E-GreaterFalse]
eval_e FG G greater(E1, E2) falseVal O


eval_e FG G E1 V1 O1
eval_e FG G E2 V2 O2
val_eq V1 V2
appendOutput O1 O2 O
-------------------------------- [E-EqTrue]
eval_e FG G eq(E1, E2) trueVal O


eval_e FG G E1 V1 O1
eval_e FG G E2 V2 O2
! val_eq V1 V2
appendOutput O1 O2 O
--------------------------------- [E-EqFalse]
eval_e FG G eq(E1, E2) falseVal O


eval_e FG G E1 trueVal O1
eval_e FG G E2 trueVal O2
appendOutput O1 O2 O
--------------------------------- [E-AndTrue]
eval_e FG G and(E1, E2) trueVal O


eval_e FG G E1 falseVal O
---------------------------------- [E-AndFalse1]
eval_e FG G and(E1, E2) falseVal O


eval_e FG G E1 trueVal O1
eval_e FG G E2 falseVal O2
appendOutput O1 O2 O
---------------------------------- [E-AndFalse2]
eval_e FG G and(E1, E2) falseVal O


eval_e FG G E1 trueVal O
-------------------------------- [E-OrTrue1]
eval_e FG G or(E1, E2) trueVal O


eval_e FG G E1 falseVal O1
eval_e FG G E2 trueVal O2
appendOutput O1 O2 O
-------------------------------- [E-OrTrue2]
eval_e FG G or(E1, E2) trueVal O


eval_e FG G E1 falseVal O1
eval_e FG G E2 falseVal O2
appendOutput O1 O2 O
--------------------------------- [E-OrFalse]
eval_e FG G or(E1, E2) falseVal O


------------------------------------ [E-True]
eval_e FG G true trueVal emptyOutput


-------------------------------------- [E-False]
eval_e FG G false falseVal emptyOutput


lookupFun FG Fun RetName ParamNames Body
eval_args FG G Args ParamNames ArgsCtx O1
eval_c FG ArgsCtx Body G2 O2
lookup G2 RetName V
appendOutput O1 O2 O
----------------------------------------- [E-Call]
eval_e FG G call(F, Args) V O


eval_rf FG G Fields FieldVals O
------------------------------------------------ [E-RecBuild]
eval_e FG G recBuild(Fields) recVal(FieldVals) O


eval_e FG G Rec recVal(Fields) O
lookup Fields Field V
------------------------------------------ [E-RecField]
eval_e FG G recFieldAccess(Rec, Field) V O



/*Record Field Evaluation*/

-------------------------------------------- [ERF-End]
eval_rf FG G endRecFieldExprs [] emptyOutput


eval_e FG G E V O1
eval_rf FG G Rest FVs O2
appendOutput O1 O2 O
------------------------------------------------------- [ERF-Add]
eval_rf FG G addRecFieldExprs(L, E, Rest) (L, V)::FVs O



/*Argument Evaluation*/

---------------------------------------- [EA-End]
eval_args FG G endArgs [] [] emptyOutput


eval_e FG G E V O1
eval_args FG G Rest NRest C O2
appendOutput O1 O2 O
---------------------------------------------------- [EA-Add]
eval_args FG G addArgs(E, Rest) X::NRest (X, V)::C O



/*Command Evaluation*/

------------------------------ [E-Noop]
eval_c FG G noop G emptyOutput


eval_c FG G C1 G1 O1
eval_c FG G1 C2 G2 O2
appendOutput O1 O2 O
---------------------------- [E-Seq]
eval_c FG G seq(C1, C2) G2 O


eval_e FG G E V O
----------------------------------------- [E-Declare]
eval_c FG G declare(X, Ty, E) (X, V)::G O


eval_e FG G E V O
------------------------------------ [E-Assign]
eval_c FG G assign(X, E) (X, V)::G O


eval_e FG G Cond trueVal O1
eval_c FG G Then G1 O2
appendOutput O1 O2 O
--------------------------------------------- [E-IfThenElseTrue]
eval_c FG G ifThenElse(Cond, Then, Else) G1 O


eval_e FG G Cond falseVal O1
eval_c FG G Else G1 O2
appendOutput O1 O2 O
--------------------------------------------- [E-IfThenElseFalse]
eval_c FG G ifThenElse(Cond, Then, Else) G1 O


eval_e FG G Cond falseVal O
--------------------------------- [E-WhileFalse]
eval_c FG G while(Cond, Body) G O


eval_e FG G Cond trueVal O1
eval_c FG G Body G1 O2
eval_c FG G1 while(Cond, Body) G2 O3
appendOutput O1 O2 O4
appendOutput O4 O3 O
------------------------------------ [E-WhileTrue]
eval_c FG G while(Cond, Body) G2 O


eval_e FG G E V O
lookup G Rec recVal(Fields)
update_rec_fields RecFields Fields V Result
------------------------------------------------- [E-RecUpdate]
eval_c FG G recUpdate(Rec, RecFields, E) Result O


eval_e FG G E V O
----------------------------------------- [E-Print]
eval_c FG G printVal(E) G addOutput(O, V)


/*Update the associations in the first tyCtx for the fields,
  descending through it to place the value in the final one, producing
  the ending tyCtx*/
Judgment update_rec_fields : recFields* [(string, value)] value [(string, value)]

--------------------------------------------------- [URF-One]
update_rec_fields oneField(F) Init V (F, V)::Init


lookup Init F recVal(FFields)
update_rec_fields Rest FFields V UpdatedFFields
----------------------------------------------------- [URF-Step]
{update_rec_fields addField(F, Rest) Init V
                   (F, recVal(UpdatedFFields))::Init}



/*Program Evaluation*/

eval_fun Fun Name RetName Names Body
{eval_program MainArgs addFun(Name, RetName, Names,
                              Body, FG) Rest O}
--------------------------------------------------- [EP-Add]
eval_program ManArgs FG addProgram(Fun, Rest) O


lookupFun FG "main" RetName Params Body
buildEvalctx Params MainArgs G
eval_c FG G Body G O
--------------------------------------- [EP-End]
eval_program MainArgs FG endProgram O


paramsToNameList Params Names
----------------------------------------------- [EF-Fun]
eval_fun fun(Name, RetTy, RetName, Params, Body
            ) Name RetName Names Body


eval_program Args emptyFun P O
============================== [FE-Program]
full_eval Args P O



/*Turn a list of names and a list of values into an evalctx*/
Fixed Judgment buildEvalctx : [string] [value] [(string, value)]

===================== [BEC-End]
buildEvalctx [] [] []


buildEvalctx PRest VRest ERest
============================================ [BEC-Add]
buildEvalctx N::PRest V::VRest (N, V)::ERest



/*Check equality in a way appropriate to each value type*/
Judgment val_eq : value* value

-------------------------- [VE-Int]
val_eq intVal(I) intVal(I)


---------------------- [VE-True]
val_eq trueVal trueVal


------------------------ [VE-False]
val_eq falseVal falseVal


evalctx_eq Fields1 Fields2
-------------------------------------- [VE-Rec]
val_eq recVal(Fields1) recVal(Fields2)

