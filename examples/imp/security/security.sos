Module imp:security

Builds on imp:host


/*Security contexts hold public and private variables*/
status ::= private
         | public
Translation status :

secctx ::= emptysec
         | addsec(string, status, secctx)
Translation secctx :



/*Lookup the security level of a variable in a security context*/
Fixed Judgment slookup : secctx string status


============================== [SL-Here]
slookup addsec(X, S, Rest) X S


slookup Rest X S
Y != X
============================== [SL-Later]
slookup addsec(Y, T, Rest) X S


/*Anything not contained in the context is assumed to be public*/
========================== [SL-NotPresent]
slookup emptysec X private



/*Get the highest of two security levels*/
Fixed Judgment smax : status status status

====================== [SM-Private1]
smax private S private


====================== [SM-Private2]
smax S private private


========================= [SM-Public]
smax public public public





/*Security Analysis*/
Judgment sec_level_a : secctx a* status
Judgment sec_level_b : secctx b* status
Judgment is_secure : status secctx c* /*program counter, ctx, cmd*/




/*Security Level for Arithmetic Expressions*/
sec_level_a SC A1 S1
sec_level_a SC A2 S2
smax S1 S2 S
----------------------------- [S-Plus]
sec_level_a SC plus(A1, A2) S


---------------------------- [S-Num]
sec_level_a SC num(I) public


slookup SC X S
------------------------ [S-Name]
sec_level_a SC name(X) S



|{a}- A ~~> A_t
sec_level_a SC A_t S
-------------------- [S-A-Trans]*
sec_level_a SC A S




/*Security Level for Boolean Expressions*/
sec_level_a SC A1 S1
sec_level_a SC A2 S2
smax S1 S2 S
-------------------------------- [S-Greater]
sec_level_b SC greater(A1, A2) S


sec_level_a SC A1 S1
sec_level_a SC A2 S2
smax S1 S2 S
--------------------------- [S-Eq]
sec_level_b SC eq(A1, A2) S


sec_level_b SC A1 S1
sec_level_b SC A2 S2
smax S1 S2 S
---------------------------- [S-And]
sec_level_b SC and(A1, A2) S


sec_level_b SC A1 S1
sec_level_b SC A2 S2
smax S1 S2 S
--------------------------- [S-Or]
sec_level_b SC or(A1, A2) S


-------------------------- [S-True]
sec_level_b SC true public


--------------------------- [S-False]
sec_level_b SC false public



|{b}- B ~~> B_t
sec_level_b SC B_t S
-------------------- [S-B-Trans]*
sec_level_b SC B S




/*Security for Commands*/
-------------------- [S-Noop]
is_secure PC SC noop


is_secure PC SC C1
is_secure PC SC C2
--------------------------- [S-Seq]
is_secure PC SC seq(C1, C2)


/*Can put anything into a private var, since it won't leak*/
slookup SC X private
---------------------------- [S-AssignPrivate]
is_secure PC SC assign(X, A)


/*Can only assign into public if private hasn't made us reach here (PC
  is public) and A doesn't have private information*/
slookup SC X public
sec_level_a SC A public
-------------------------------- [S-AssignPublic]
is_secure public SC assign(X, A)


sec_level_b SC B SB
smax SB PC S
is_secure S SC C1
is_secure S SC C2
------------------------------------- [S-IfThenElse]
is_secure PC SC ifThenElse(B, C1, C2)


sec_level_b SC B SB
smax SB PC S
is_secure S SC C
--------------------------- [S-While]
is_secure PC SC while(B, C)



|{c}- C ~~> C_t
is_secure PC SC C_t
------------------- [S-C-Trans]*
is_secure PC SC C

